options:
  type:                         InnoDB
  collate:                      utf8_bin
  charset:                      utf8
  connection:                   doctrine
        
Country:
  actAs:
  tableName:                    country
  columns:
    name:                       { type: string(255), notnull: true }
    code:                       { type: string(10), notnull: true }
    
StateProvince:
  actAs:
  tableName:                    state_province
  columns:
    name:                       { type: string(255), notnull: true }
    country_id:                 { type: integer, notnull: true }
  relations:
    Country:                    { local: country_id, foreign: id, foreignAlias: Provinces }
    
Institution:
  actAs:
  tableName:                    institution
  columns:
    name:                       { type: string(255), notnull: true }
    abbreviation:               { type: string(10), notnull: true }
    description:                { type: clob, notnull: true }
    country_id:                 { type: integer, notnull: true }
  relations:
    Country:                    { local: country_id, foreign: id, foreignAlias: Institutions } 
    
Faculty: 
  actAs:
  tableName:                    faculty
  columns:
    name:                       { type: string(255), notnull: true }
    abbreviation:               { type: string(10), notnull: true }
    institution_id:             { type: integer, notnull: true }
  relations:
    Institution:                { local: institution_id, foreign: id, foreignAlias: Faculites }
    
Department: 
  actAs:
  tableName:                    department
  columns: 
    name:                       { type: string(255), notnull: true }
    abbreviation:               { type: string(10), notnull: true }
    faculty_id:                 { type: integer, notnull: true }
  relations:
    Faculty:                    { local: faculty_id, foreign: id, foreignAlias: Departments }
      
ProfileAward:
  columns:
    profile_id:                 { type: integer }
    institution:                { type: string(255) }
    description:                { type: string(500) }
    year:                       { type: string(255) }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignAlias: Awards, onDelete: CASCADE }
      
ProfileQualification:
  columns:
    profile_id:                 { type: integer }
    institution:                { type: string(255) }
    description:                { type: string(500) }
    year:                       { type: string(255) }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignAlias: Qualifications, onDelete: CASCADE }
    
ProfilePublication:
  columns:
    profile_id:                 { type: integer }
    title:                      { type: string(255), notnull: true }
    link:                       { type: string(500) }
    year:                       { type: string(255) }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignAlias: Publications, onDelete: CASCADE }
    
ProfileBook:
  columns:
    profile_id:                 { type: integer }
    title:                      { type: string(255), notnull: true }
    author:                     { type: string(255) }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignAlias: FavouriteBooks, onDelete: CASCADE }
    
ProfileInterest:
  columns:
    profile_id:                 { type: integer }
    name:                       { type: string(500), notnull: true }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignAlias: Interests, onDelete: CASCADE }
         
Contact:
  actAs:
    Timestampable:              ~
  columns:
    email_address:              { type: string(255) }
    phone_work:                 { type: string(200) }
    phone_home:                 { type: string(200) }
    phone_mobile:               { type: string(200) }
    address_line_1:             { type: string(300) }
    address_line_2:             { type: string(300) }
    postcode:                   { type: string(10) }
    city:                       { type: string(255) }
    country_id:                 { type: integer, notnull: true }
    state_province_id:          { type: integer, notnull: true }
  relations:
    Country:                    { local: country_id, foreign: id, type: one, foreignType: one }
    StateProvince:              { local: state_province_id, foreign: id, type: one, foreignType: one }
    
ActivityFeed:
  actAs:
    Timestampable:              ~
  tableName:                    activity_feed
  columns:
    profile_id:                 { type: integer, notnull: true }
    item_id:                    { type: integer, notnull: true }
    type:                       { type: integer, default: 0, notnull: true }
  relations:
    Doer:                       { class: Profile, local: profile_id, foreign: id, foreignAlias: MyActivities, onDelete: CASCADE }
    
ProfileActivityFeed:
  actAs:
  tableName:                    profile_activity_feed
  columns:
    profile_id:                 { type: integer, notnull: true }
    activity_feed_id:           { type: integer, notnull: true }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, onDelete: CASCADE, foreignAlias: ProfileActivityFeeds }
    ActivityFeed:               { class: ActivityFeed, local: activity_feed_id, onDelete: CASCADE, foreignAlias: ActivityFeedProfiles }
        
Peer:
  actAs:
  tableName:                    peer
  columns:  
    inviter_id:                 { type: integer, notnull: true }
    invitee_id:                 { type: integer, notnull: true }
    status:                     { type: integer, default: 0, notnull: true } #[Open, Suggested, Inivited, Peered, Declined]
  relations:
    Inviter:                    { class: Profile, local: inviter_id, foreign: id, foreignAlias: MyPeers, onDelete: CASCADE }
    Invitee:                    { class: Profile, local: invitee_id, foreign: id, foreignAlias: OtherPeers, onDelete: CASCADE }   
    
ProfileProgramme:
  actAs:
  tableName:                    profile_programme
  columns:
    profile_id:                 { type: integer, notnull: true }
    program_id:                 { type: integer, notnull: true }
  relations:
    Profile:                    { class: Profile, local: profile_id, onDelete: CASCADE, foreignAlias: ProfileProgrammes }
    Program:                    { class: Program, local: program_id, onDelete: CASCADE, foreignAlias: ProgrammeProfiles }
    
ProfileCourse:
  actAs:
  tableName:                    profile_course
  columns:
    profile_id:                 { type: integer, notnull: true }
    course_id:                  { type: integer, notnull: true }
  relations:
    Profile:                    { class: Profile, local: profile_id, onDelete: CASCADE, foreignAlias: ProfileCourses }
    Course:                     { class: Course, local: course_id, onDelete: CASCADE, foreignAlias: CourseProfiles }
    
CourseMailingList:
  actAs:
  tableName:                    course_mailing_list
  columns:
    mailing_list_id:            { type: integer, notnull: true }
    course_id:                  { type: integer, notnull: true }
  relations:
    MailingList:                { class: MailingList, local: mailing_list_id, onDelete: CASCADE, foreignAlias: CourseMailingLists }
    Course:                     { class: Course, local: course_id, onDelete: CASCADE, foreignAlias: CourseMailingLists }
    
Discussion:
  actAs:       
    Timestampable:              ~
    Sluggable:
      fields:                   [ name ]
  tableName:                    discussion
  columns:
    name:                       { type: string(255), notnull: true }
    profile_id:        				  { type: integer, notnull: true }
    description:                { type: clob, notnull: true }
    access_level:               { type: integer, notnull: true }
    last_visit:                 { type: timestamp, notnull: false }
    latest_comment_id:          { type: integer, notnull: false }
    comment_count:              { type: integer, notnull: false, default: 0 }
    post_count:                 { type: integer, notnull: false, default: 0 }
    view_count:                 { type: integer, notnull: false, default: 0 }
    is_primary:                 { type: boolean, default: 0 }
    is_removed:                 { type: boolean, default: 0 }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignType: one, type: one, onDelete: CASCADE }
    DiscussionComment:          { class: DiscussionComment, local: latest_comment_id, foreign: id, foreignType: one, type: one, onDelete: CASCADE }
    
DiscussionPeer:
  actAs:                        [ Timestampable ]
  tableName:                    discussion_peer
  columns:
    nickname:                   { type: string(255), notnull: true }
    subscription_type:          { type: integer, notnull: true, default: 0 } #[ Prompt Email, Summary Email, Digest Email ]
    membership_type:            { type: integer, notnull: true, default: 0 } #[ Regular Member, Manager, Owner ]
    status:                     { type: integer, notnull: true, default: 0 } #[ Joined, Waiting, Ignored, Unscribed ]
    discussion_id:        { type: integer, notnull: true }
    profile_id:                 { type: integer, notnull: true }
    is_removed:                 { type: boolean, default: 0 }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignType: one, type: one, onDelete: CASCADE }
    Discussion:                 { class: Discussion, local: discussion_id, foreign: id, onDelete: CASCADE, foreignAlias: Peers }
    
DiscussionTopic:
  actAs:       
    Timestampable:              ~
    Sluggable:
      fields:                   [subject, discussion_id]
  tableName:                    discussion_topic
  columns:
    subject:                    { type: string(255), notnull: true }
    type:                       { type: enum, notnull: true, values: [ General, Question, Suggestion, Sharing, Insight, Compliment ], default: 'General' }
    message:        				    { type: clob, notnull: true }
    discussion_id:              { type: integer, notnull: true }
    profile_id:                 { type: integer, notnull: true }
    latest_comment_id:          { type: integer, notnull: false }
    view_count:                 { type: integer, notnull: false, default: 0 }
    comment_count:              { type: integer, notnull: false, default: 0 }
    is_primary:                 { type: boolean, default: 0 }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignType: one, type: one, onDelete: CASCADE }
    Discussion:                 { class: Discussion, local: discussion_id, foreign: id, onDelete: CASCADE, foreignAlias: Topics }
 
DiscussionPost:
  actAs:                        [ Timestampable ]
  tableName:                    discussion_post
  columns:
    message:        				    { type: clob, notnull: true }
    profile_id:                 { type: integer, notnull: true }
    discussion_topic_id:        { type: integer, notnull: true }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignType: one, type: one, onDelete: CASCADE }
    DiscussionTopic:            { class: DiscussionTopic, local: discussion_topic_id, foreign: id, onDelete: CASCADE, foreignAlias: Posts }
    
DiscussionComment:
  actAs:                        [ Timestampable ]
  tableName:                    discussion_comment
  columns:
    reply:        				      { type: clob, notnull: true }
    profile_id:                 { type: integer, notnull: true }
    discussion_post_id:         { type: integer, notnull: true }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignType: one, type: one, onDelete: CASCADE }
    DiscussionPost:             { class: DiscussionPost, local: discussion_post_id, foreign: id, onDelete: CASCADE, foreignAlias: Comments }
    
CourseDiscussion:
  tableName:                    course_discussion
  columns:
    course_id:                  { type: integer, notnull: true }
    discussion_id:              { type: integer, notnull: true }
  relations:      
    Course:                     { class: Course, local: course_id, foreign: id, onDelete: CASCADE, foreignAlias: CourseDiscussions }          
    Discussion:                 { class: Discussion, local: discussion_id, foreignType: one, foreign: id, onDelete: CASCADE, foreignAlias: CourseDiscussion }
    
AssignmentDiscussion:
  tableName:                    assignment_discussion
  columns:
    assignment_id:              { type: integer, notnull: true }
    discussion_id:              { type: integer, notnull: true }
  relations:      
    Assisgnment:                { class: Assisgnment, local: assignment_id, type: one, foreignType: one, foreign: id, onDelete: CASCADE, foreignAlias: Discussions }          
    Discussion:                 { class: Discussion, local: discussion_id, type: one, foreignType: one, foreign: id, onDelete: CASCADE, foreignAlias: Assignment }
    
Attendance:
  actAs:                        [ Timestampable ]
  tableName:                    attendance
  columns:
    date:                       { type: timestamp, notnull: false }
    course_id:                  { type: integer, notnull: true }
    course_meeting_time_id:     { type: integer, notnull: true }
  relations:
    Course:                     { class: Course, local: course_id, foreign: id, onDelete: CASCADE, foreignAlias: Attendances }    
    CourseMeetingTime:          { class: CourseMeetingTime, local: course_meeting_time_id, foreign: id, onDelete: CASCADE, foreignAlias: Attendances }   
    
ProfileAttendance:
  actAs:                        [ Timestampable ]
  tableName:                    profile_attendance
  columns:
    status:                     { type: integer, default: 0, notnull: true } #[Unrecorded, Present, Absent, Tardy, Excused]
    attendance_id:              { type: integer, notnull: true }
    profile_id:                 { type: integer, notnull: true }
  relations:
    Attendance:                 { class: Attendance, local: attendance_id, foreign: id, onDelete: CASCADE, foreignAlias: Students }
    Profile:                    { class: Profile, local: profile_id, foreign: id, onDelete: CASCADE, foreignAlias: Attendances }
    
Gradebook:
  actAs:                        [ Timestampable ]
  tableName:                    gradebook
  columns:
    items:                      { type: integer, default: 0, notnull: true }
    course_id:                  { type: integer, notnull: true }
  relations:
    Course:                     { class: Course, local: course_id, foreign: id, onDelete: CASCADE }
    
GradebookScale:
  actAs:                        [ Timestampable ]
  tableName:                    gradebook_scale
  columns:
    min_points:                 { type: decimal, default: 0, notnull: true }
    max_points:                 { type: decimal, default: 0, notnull: true }
    code:                       { type: string(255), notnull: true }
    gradebook_id:               { type: integer, notnull: true }
  relations:
    Gradebook:                  { class: Gradebook, local: gradebook_id, foreign: id, onDelete: CASCADE, foreignAlias: GradebookScales }
    
GradebookItem:
  actAs:                        [ Timestampable ]
  tableName:                    gradebook_item
  columns:
    name:                       { type: string(255), notnull: true }
    weight:                     { type: decimal, default: 0, notnull: true }
    gradebook_id:               { type: integer, notnull: true }
  relations:
    Gradebook:                  { class: Gradebook, local: gradebook_id, foreign: id, onDelete: CASCADE, foreignAlias: GradebookItems }
    
ProfileGradebookItem:
  actAs:                        [ Timestampable ]
  tableName:                    profile_gradebook_item
  columns:
    points:                     { type: decimal, default: 0, notnull: true }
    gradebook_item_id:          { type: integer, notnull: true }
    profile_id:                 { type: integer, notnull: true }
  relations:
    GradebookItem:              { class: GradebookItem, local: gradebook_item_id, foreign: id, onDelete: CASCADE, foreignAlias: ProfileGradebookItems }
    Profile:                    { class: Profile, local: profile_id, foreign: id, onDelete: CASCADE, foreignAlias: ProfileGradebookItems }
    
NotificationSettings:
  actAs:
  tableName:                    notification_settings
  columns:  
    email:                      { type: boolean, default: 0 }
    reply:                      { type: boolean, default: 0 }
    peer_activities:            { type: boolean, default: 0 }
    news_alerts:                { type: boolean, default: 0 }
    announcement_alerts:        { type: boolean, default: 0 }
    event_alerts:               { type: boolean, default: 0 }
    discussion_updates:         { type: boolean, default: 0 }
    course_updates:             { type: boolean, default: 0 }
    assignment_due:             { type: boolean, default: 0 }
    system_updates:             { type: boolean, default: 0 }
    system_maintenance:         { type: boolean, default: 0 }
    profile_id:                 { type: integer, notnull: true }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignType: one, type: one, onDelete: CASCADE, foreignAlias: NotificationSettings }
    
AssessmentType:
  actAs:       
    Timestampable:              ~
  tableName:                    assessment_type
  columns:
    name:                       { type: string(255), notnull: true }
    weight:                     { type: decimal, default: 0, notnull: true }
    course_id:                  { type: integer, notnull: true }
  relations:
    Course:                     { class: Course, local: course_id, foreign: id, onDelete: CASCADE }
    
Assignment:
  actAs:       
    Timestampable:              ~
    Sluggable:
      fields:                   [ title ]
  tableName:                    assignment
  columns:
    title:                      { type: string(255), notnull: true }
    assessment_type_id:         { type: integer, notnull: true }
    description:                { type: clob, notnull: true }
    submission:                 { type: integer, notnull: true }
    due_date:                   { type: timestamp, notnull: false }
    points:                     { type: integer, notnull: true }
    weight:                     { type: decimal, default: 0, notnull: true }
    lock_until:                 { type: timestamp, notnull: false }
    lock_after:                 { type: timestamp, notnull: false }
    notify_users:               { type: boolean, default: 0 }
    is_graded:                  { type: boolean, default: 0 }
    allow_late_submission:      { type: boolean, default: 0 }
    is_graded:                  { type: boolean, default: 0 }
    graded_by:                  { type: integer, notnull: true }
    course_id:                  { type: integer, notnull: true }
  relations:
    Course:                     { class: Course, local: course_id, foreign: id, onDelete: CASCADE }
    AssessmentType:             { local: assessment_type_id, foreign: id, type: one, foreignType: one }
    
AssignmentFile:
  tableName:                    assignment_file
  columns:
    assignment_id:              { type: integer, notnull: true }
    file_id:                    { type: integer, notnull: true }
  relations:      
    Assignment:                 { class: Assignment, local: assignment_id, foreign: id, onDelete: CASCADE }          
    File:                       { class: File, local: file_id, foreign: id, onDelete: CASCADE }
    
AssignmentSubmission:
  actAs:                        [ Timestampable ]
  tableName:                    assignment_submission
  columns:
    assignment_id:              { type: integer, notnull: true }
    generated_file:             { type: string(255), notnull: true }
    original_file:              { type: string(255), notnull: true }
    profile_id:                 { type: integer, notnull: true }
    status:                     { type: integer, default: 0, notnull: true } #[Timely, Late, Resubmission]
  relations:      
    Assignment:                 { class: Assignment, local: assignment_id, foreign: id, foreignAlias: Submissions, onDelete: CASCADE }
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignAlias: AssignmentSubmissions, onDelete: CASCADE }
    
Announcement:
  actAs:       
    Timestampable:              ~
    Sluggable:
      fields:                   [ subject ]
  tableName:                    announcement
  columns:
    profile_id:                 { type: integer, notnull: true }
    subject:                    { type: string(255), notnull: true }
    message:                    { type: clob, notnull: true }
    is_published:               { type: boolean, default: 0, notnull: true }
    lock_until:                 { type: timestamp, notnull: false }
    lock_after:                 { type: timestamp, notnull: false }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignType: one, type: one, onDelete: CASCADE }
     
CourseAnnouncement:
  tableName:                    course_announcement
  columns:
    course_id:                  { type: integer, notnull: true }
    announcement_id:            { type: integer, notnull: true }
  relations:      
    Course:                     { class: Course, local: course_id, foreign: id, onDelete: CASCADE, foreignAlias: CourseAnnouncements }          
    Announcement:               { class: Announcement, local: announcement_id, foreign: id, onDelete: CASCADE }
    
Campus:
  actAs:
  tableName:                    campus
  columns:
    name:                       { type: string(255), notnull: true }
    is_primary:                 { type: boolean, default: 0 }
    address:                    { type: string(255), notnull: true }
    city:                       { type: string(255), notnull: true }
    postcode:                   { type: string(10), notnull: true }
    institution_id:             { type: integer, notnull: true }
  relations:
    Institution:                { local: institution_id, foreign: id}
    Courses:                    { class: Course, local: campus_id, foreign: course_id, refClass: CampusCourse, foreignAlias: Campuses }
      
Building:
  actAs:
  tableName:                    building
  columns:
    name:                       { type: string(255), notnull: true }
    abbreviation:               { type: string(10), notnull: false }
    
Room:
  actAs:
  tableName:                    room
  columns:
    name:                       { type: string(255), notnull: true }
    abbreviation:               { type: string(10), notnull: true }
    building_id:                { type: integer, notnull: true }
  relations:
    Building:                   { local: building_id, foreign: id, type: one, foreignType: one }
    
AcademicYear:
  actAs:
  tableName:                    academic_year
  columns:
    year_start:                 { type: integer, notnull: true }
    year_end:                   { type: integer, notnull: true }
    
AcademicPeriod:
  actAs:
  tableName:                    academic_period
  columns:
    name:                       { type: string(255), notnull: true }    
    start_date:                 { type: timestamp, notnull: true }
    end_date:                   { type: timestamp, notnull: true }
    grades_due:                 { type: timestamp, notnull: true }
    max_credits:                { type: string(10), notnull: true }
    academic_year_id:           { type: integer, notnull: true }
  relations:
    AcademicYear:               { local: academic_year_id, foreign: id, type: one, foreignType: one }
    
Course:
  actAs:      
    Timestampable:              ~
    Sluggable:
      fields:                   [ name ]
      uniqueBy:                 [ code, name ]
  tableName:                    course
  columns:
    name:                       { type: string(255), notnull: true }
    code:                       { type: string(10), notnull: true }
    department_id:              { type: integer, notnull: true } 
    description:                { type: clob, notnull: true }
    background:                 { type: clob, notnull: true, default: 'This course has been developed collaboratively by a team of TutorPlus tutors and educationists.' }
    is_finalized:               { type: boolean, default: 0, notnull: true }
    academic_period_id:         { type: integer, notnull: true }
    start_date:                 { type: timestamp, notnull: true }
    end_date:                   { type: timestamp, notnull: true }
    credits:                    { type: decimal, scale: 2, default: 0 }
    hours:                      { type: integer, notnull: true }   
    max_enrolled:               { type: integer, notnull: true }
  relations:
    Department:                 { local: department_id, foreign: id, foreignAlias: Courses }
    AcademicPeriod:             { local: academic_period_id, foreign: id, type: one, foreignType: one }

CourseMeetingTime: 
  actAs:
  tableName:                    course_meeting_time
  columns:
    day:                        { type: integer, notnull: true } # sun - sat
    from_time:                  { type: string(255), notnull: true }
    to_time:                    { type: string(255), notnull: true }
    course_id:                  { type: integer, notnull: true }
    building_id:                { type: integer, notnull: true }
    room_id:                    { type: integer, notnull: true }
  relations:
    Building:                   { local: building_id, foreign: id, type: one, foreignType: one }
    Room:                       { local: room_id, foreign: id, type: one, foreignType: one }
    Course:                     { class: Course, local: course_id, foreign: id, onDelete: CASCADE, foreignAlias: CourseMeetingTimes }

CourseLink: 
  actAs:
  tableName:                    course_link
  columns:
    name:                       { type: string(255), notnull: true }
    url:                        { type: string(255), notnull: true }
    course_id:                  { type: integer, notnull: true }
  relations:
    Course:                     { class: Course, local: course_id, foreign: id, onDelete: CASCADE }

CourseReadingItem: 
  actAs:
  tableName:                    course_reading_item
  columns:
    title:                      { type: string(255), notnull: true }
    author:                     { type: string(255), notnull: true }
    course_id:                  { type: integer, notnull: true }
  relations:
    Course:                     { class: Course, local: course_id, foreign: id, onDelete: CASCADE }

CourseSyllabus: 
  actAs:
  tableName:                    course_syllabus
  columns:
    content:                    { type: clob, notnull: true, default: "Edit me", }
    course_id:                  { type: integer, notnull: true }
  relations:
    Course:                     { class: Course, local: course_id, foreign: id, onDelete: CASCADE, foreignType: one }
      
CampusCourse:
  actAs:
  tableName:                    campus_course
  columns:
    campus_id:                  { type: integer, notnull: true }
    course_id:                  { type: integer, notnull: true }
  relations:                
    Campus:                     { class: Campus, local: campus_id, foreign: id, onDelete: CASCADE }
    Course:                     { class: Course, local: course_id, foreign: id, onDelete: CASCADE }
    
ProgramLevel: 
  actAs:
  tableName:                    program_level
  columns:
    name:                       { type: string(255), notnull: true }

Program:
  actAs:
  tableName:                    program
  columns:
    name:                       { type: string(255), notnull: true }
    abbreviation:               { type: string(10), notnull: true }
    code:                       { type: string(255), notnull: true }
    description:                { type: clob, notnull: true }
    type:                       { type: integer, default: 0, notnull: true } #[Degree, Diploma, Certificate]
    department_id:              { type: integer, notnull: true }
    program_level_id:           { type: integer, notnull: true }
  relations:
    Department:                 { local: department_id, foreign: id, foreignAlias: Programmes }
    ProgramLevel:               { local: program_level_id, foreign: id, foreignAlias: Programmes }
    
EmailTemplate:
  actAs:       
    Timestampable:              ~
    Sluggable:
      fields:                   [name]
      uniqueBy:                 [name]
      unique:                   true
      canUpdate:                true
  tableName:                    email_template
  columns:
    name:                       { type: string(255), notnull: true, unique: true }
    subject:                    { type: string(5000), notnull: true }
    description:                { type: string(5000) }
    patterns:                   { type: string(500) }
    body:                       { type: clob, notnull: true }
    from_email:                 { type: string(5000), notnull: true }
    from_name:                  { type: string(255), notnull: true, default: 'Tutor+ team'}
    to_email:                   { type: string(5000) }
    cc_email:                   { type: string(5000) }
    bcc_email:                  { type: string(5000) }
    reply_to:                   { type: string(5000), notnull: true }
    is_html:                    { type: boolean, notnull: true, default: false }
    is_active:                  { type: boolean, notnull: true, default: true }
    
EmailMessage:
  actAs:   
    Timestampable:              ~
  tableName:                    email_message
  columns:
    from_email:                 { type: string(255), notnull: true }
    to_email:                   { type: clob }
    cc_email:                   { type: clob }
    bcc_email:                  { type: clob }
    email_template_id:          { type: integer }
    sender_id:                  { type: integer, notnull: true }
    reply_to:                   { type: string(255), notnull: true }
    subject:                    { type: string(255), notnull: true }
    body:                       { type: clob, notnull: true }
    status:                     { type: integer, default: 0, notnull: true } #[Sent, Received]
    is_read:                    { type: boolean, notnull: true, default: false }
    is_trashed:                 { type: boolean, notnull: true, default: false }
  relations:
    EmailTemplate:              { class: EmailTemplate, local: email_template_id, foreign: id, onDelete: CASCADE }
    Sender:                     { class: Profile, local: sender_id, foreignAlias: EmailMessages, foreignType: many, type: one, foreign: id, onDelete: CASCADE }
    
MailingListEmailMessage:
  actAs:
  tableName:                    mailing_list_email_message
  columns:
    mailing_list_id:            { type: integer, notnull: true }
    email_message_id:           { type: integer, notnull: true }
  relations: 
    MailingList:                { class: MailingList, local: mailing_list_id, foreign: id, onDelete: CASCADE, foreignAlias: EmailMessages }
    EmailMessage:               { class: EmailMessage, local: email_message_id, foreign: id, onDelete: CASCADE , foreignAlias: MailingLists }
    
EmailMessageCorrespondence:
  actAs:   
    Timestampable:              ~
  tableName:                    email_message_correspondence
  columns:
    initiator_id:               { type: integer, notnull: true }
    invitee_id:                 { type: integer, notnull: true }
  relations:
    InitiatorMessage:           { class: EmailMessage, local: initiator_id, foreignAlias: EmailMessageInitiator, foreignType: one, type: one, foreign: id, onDelete: CASCADE }
    inviteeMessage:             { class: EmailMessage, local: invitee_id, foreignAlias: EmailMessageinvitee, foreignType: one, type: one, foreign: id, onDelete: CASCADE }
  
EmailMessageReply:
  columns:
    sender_id:                  { type: integer, notnull: true }
    responder_id:               { type: integer, notnull: true }
    email_message_id:           { type: integer, notnull: true }
    email_message_reply_id:     { type: integer, notnull: true }
  relations:                
    SendingProfile:             { class: Profile, local: sender_id, foreignAlias: MyReplies, foreign: id, onDelete: CASCADE }          
    RespondingProfile:          { class: Profile, local: responder_id, foreignAlias: OtherReplies, foreign: id, onDelete: CASCADE }
    EmailMessage:               { class: EmailMessage, local: email_message_id, foreignAlias: Replies, foreignType: many, type: one, foreign: id, onDelete: CASCADE }
    EmailMessageReply:          { class: EmailMessage, local: email_message_reply_id, foreignAlias: Invoker, foreignType: one, type: one, foreign: id, onDelete: CASCADE }   
   
MailingList:
  actAs:                        [ Timestampable ]
  tableName:                    mailing_list
  columns:
    name:                       { type: string(255), notnull: true }
    profile_id:                 { type: integer, notnull: true }
  relations:                
    Profile:                    { class: Profile, local: profile_id, foreign: id, onDelete: CASCADE, foreignAlias: MailingLists }

Calendar:
  actAs:
  columns:
    name:                       { type: string(255), notnull: true }
    description:                { type: clob, notnull: true }
    is_public:                  { type: boolean, default: 0, notnull: true }
    type:                       { type: integer, default: 0, notnull: true } #[Personal Calendar, Public Calendar, Academic Calendar, Social Calendar, Exams Calendar]
    color:                      { type: string(255), notnull: true }
    
Faq:
  actAs:       
    Timestampable:              ~
    Sluggable:
      fields:                   [ question ]
  tableName:                    faq
  columns:
    profile_id:                 { type: integer, notnull: true }
    question:                   { type: string(255), notnull: true }
    answer:                     { type: clob, notnull: true }
    position:                   { type: integer, default: 1, notnull: true }
    is_published:               { type: boolean, default: 0, notnull: true }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignType: one, type: one, onDelete: CASCADE }
     
CourseFaq:
  tableName:                    course_faq
  columns:
    course_id:                  { type: integer, notnull: true }
    faq_id:                     { type: integer, notnull: true }
  relations:      
    Course:                     { class: Course, local: course_id, foreign: id, foreignAlias: Faqs, onDelete: CASCADE }          
    Faq:                        { class: Faq, local: faq_id, foreign: id, onDelete: CASCADE }
    
ProfileCalendar:
  actAs:
  tableName:                    profile_calendar
  columns:
    owner_id:                   { type: integer, notnull: true }
    calendar_id:                { type: integer, notnull: true }
  relations:  
    Calendar:                   { local: calendar_id, foreign: id, type: one, foreignType: one, foreignAlias: Owner }
    Owner:                      { class: Profile, local: owner_id, foreign: id, foreignType: many, foreignAlias: Owner, type: one, onDelete: CASCADE }  
    
CalendarEvent:
  actAs:             
    Timestampable:              ~
    Sluggable:
      fields:                   [ name ]
  tableName:                    calendar_event
  columns:
    calendar_id:                { type: integer, notnull: true }
    profile_id:                 { type: integer, notnull: true }
    name:                       { type: string(255), notnull: true }
    location:                   { type: string(255), notnull: true }
    from_date:                  { type: timestamp, notnull: true }
    to_date:                    { type: timestamp, notnull: true }
    reminder:                   { type: integer, default: 0, notnull: true } #[Never, On time, 5 min, 10 min, 30 min, 1 hour, 5 hour, 2 days, 5 days, 1 week]
    description:                { type: clob, notnull: true }
    is_personal:                { type: boolean, default: 0, notnull: true }
    notify_changes:             { type: boolean, default: 0, notnull: true }
  relations:
    Calendar:                   { local: calendar_id, foreign: id, type: one, foreignType: one }
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignType: one, type: one, onDelete: CASCADE }
    
CalendarEventAttendee:
  actAs:       
    Timestampable:              ~
  tableName:                    calendar_event_attendee
  columns:
    calendar_event_id:          { type: integer, notnull: true }
    profile_id:                 { type: integer, notnull: true }
    status:                     { type: integer, default: 0, notnull: true } #[Sent, Accepted, Rejected, Ignored]
    comment:                    { type: clob, notnull: true }
  relations:
    CalendarEvent:              { local: calendar_event_id, foreign: id, type: one, foreignType: many, foreignAlias: Attendees }
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignType: one, type: one, onDelete: CASCADE }
    
NewsItem:
  actAs:       
    Timestampable:              ~
    Sluggable:
      fields:                   [ heading ]
  columns:
    profile_id:                 { type: integer, notnull: true }
    heading:                    { type: string(255), notnull: true }
    blurb:                      { type: clob, notnull: true }
    body:                       { type: clob, notnull: true }
    is_published:               { type: boolean, default: 0, notnull: true }
    lock_until:                 { type: timestamp, notnull: false }
    lock_after:                 { type: timestamp, notnull: false }
  relations:
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignType: one, type: one, onDelete: CASCADE }
    
Folder:
  options:
    symfony:
  actAs:
    Timestampable:              ~
    NestedSet:
      hasManyRoots:             false
  columns:
    name:                       { type: string(255), notnull: true }
    type:                       { type: integer, default: 0, notnull: true } #[Other=0, Profiles=1, Courses=2, Assignments=3, Profile=4]
    parent_id:                  { type: integer, default: 1, notnull: true }    
    
ProfileFolder:
  actAs:
  tableName:                    profile_folder
  columns:
    profile_id:                 { type: integer, notnull: true }
    folder_id:                  { type: integer, notnull: true }
  relations:  
    Folder:                     { local: folder_id, foreign: id, type: one, foreignType: one, foreignAlias: Profile, onDelete: CASCADE }
    Profile:                    { class: Profile, local: profile_id, foreign: id, foreignType: one, foreignAlias: Folder, type: one, onDelete: CASCADE }  
    
CourseFolder:
  actAs:
  tableName:                    course_folder
  columns:
    course_id:                  { type: integer, notnull: true }
    folder_id:                  { type: integer, notnull: true }
  relations:  
    Folder:                     { local: folder_id, foreign: id, type: one, foreignType: one, foreignAlias: Course, onDelete: CASCADE }
    Course:                     { class: Course, local: course_id, foreign: id, foreignType: one, foreignAlias: Folder, type: one, onDelete: CASCADE }

File:
  options:
    symfony:
  actAs:
    Timestampable:              ~
  columns:
    folder_id:                  { type: integer, notnull: true }
    original_name:              { type: string(255), notnull: true }
    generated_name:             { type: string(255), notnull: true }
    mime_type:                  { type: string(128), notnull: true }
    size:                       { type: integer, notnull: true }
  relations:
    Folder:
      class:                    Folder
      onDelete:                 CASCADE
      foreignAlias:             Files
  indexes:
    folderFile:
      fields:                   [ folder_id, original_name ]
      type:                     unique
      
MediaAsset:
  options:
    symfony:
  actAs:
    Timestampable:              ~
  columns:
    type:                       { type: integer, notnull: true }
    name:                       { type: string(255), notnull: true }
    is_default:                 { type: boolean, default: 0 }
    
Profile:
  actAs:
    Timestampable:              ~
    Sluggable:
      fields:                   [ first_name, last_name ]
      uniqueBy:                 [ first_name, last_name ]
  columns:
    title:                      { type: enum, values: [Mr, Mrs, Ms, Miss, Dr, Sir, Prof, The, Cde] }
    first_name:                 { type: string(255) }
    last_name:                  { type: string(255) }
    middle_name:                { type: string(255) }
    about_me:                   { type: clob, notnull: false }
    birth_date:                 { type: timestamp, notnull: false }
    gender:                     { type: enum, values: [Male, Female] }
    is_instructor:              { type: boolean, default: 0 }
    high_school:                { type: string(255) }
    studied_at:                 { type: string(255) }
    current_study:              { type: string(255) }
    email:                      { type: string(255) }
    password:                   { type: string(255) }
    algorithm:                  { type: string(255), default: "sha1" }
    salt:                       { type: string(255) }
    is_super_admin:             { type: boolean, default: 0 }
    is_active:                  { type: boolean, default: 1 }
    institution_id:             { type: integer, notnull: true, default: "1" }
    last_login:                 { type: timestamp, notnull: false }  
  indexes:                      
    is_active_idx:
      fields: [is_active]
  relations:
    Institution:
      local: institution_id
      foreign: id
      type: one
      foreignType: one
    Groups:
      class: ProfileGroup
      local: profile_id
      foreign: group_id
      refClass: ProfileProfileGroup
      foreignAlias: Profiles
    Permissions:
      class: ProfilePermission
      local: profile_id
      foreign: permission_id
      refClass: ProfileProfilePermission
      foreignAlias: Profiles
      
ProfileRememberKey:
  options:
    symfony:
      form:   false
      filter: false
  actAs:
    Timestampable:              ~
  columns:
    profile_id:                 { type: integer }
    remember_key:               { type: string(32) }
    ip_address:                 { type: string(50) }
  relations:
    Profile:
      class: Profile
      local: profile_id
      foreignAlias: RememberKeys
      foreignType: one
      onDelete: CASCADE
      
ProfileForgotPassword:
  options:
    symfony:
      form:   false
      filter: false
  actAs:
    Timestampable:              ~
  columns:
    profile_id:                 { type: integer }
    unique_key:                 { type: string(255) }
    expires_at:                 { type: timestamp,  notnull: true }
  relations:
    Profile:
      class: Profile
      local: profile_id
      type: one
      foreignType: one
      foreignAlias: ForgotPassword
      onDelete: CASCADE
      
ProfileGroup:
  actAs:
    Timestampable:              ~
  columns:
    name:                       { type: string(255), notnull: true }
    description:                { type: string(1000), notnull: true }
  relations:
    Profiles:                   { class: Profile, refClass: ProfileProfileGroup, local: group_id, foreign: profile_id, onDelete: CASCADE }
    Permissions:                { class: ProfilePermission, refClass: ProfileGroupPermission, local: group_id, foreign: permission_id, foreignAlias: Groups, onDelete: CASCADE }
    
ProfilePermission:
  actAs:
    Timestampable:              ~
  columns:
    name:                       { type: string(255), notnull: true }
    description:                { type: string(1000), notnull: true }
      
ProfileGroupPermission:
  actAs:
    Timestampable:              ~
  columns:
    group_id:                   { type: integer, notnull: true }
    permission_id:              { type: integer, notnull: true }
  relations:
    Group:                      { class: ProfileGroup, local: group_id, foreign: id, foreignAlias: Group, onDelete: CASCADE }
    Permission:                 { class: ProfilePermission, local: permission_id, foreign: id, foreignAlias: Permission, onDelete: CASCADE }
    
ProfileProfileGroup:
  actAs:
    Timestampable:              ~
  columns:
    profile_id:                 { type: integer, notnull: true }
    group_id:                   { type: integer, notnull: true }
  relations:
    Profile:                    { class: Profile, local: profile_id, onDelete: CASCADE }
    Group:                      { class: ProfileGroup, local: group_id, onDelete: CASCADE }
    
ProfileProfilePermission:
  actAs:
    Timestampable:              ~
  columns:
    profile_id:                 { type: integer, notnull: true }
    permission_id:              { type: integer, notnull: true }
  relations:
    Profile:                    { class: Profile, local: profile_id, onDelete: CASCADE }
    Permission:                 { class: ProfilePermission, local: permission_id, onDelete: CASCADE }
