<?php

/**
 * CorrespondenceTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CorrespondenceTable extends Doctrine_Table
{
    const STUDENT_STUDENT = 0;
    const STUDENT_INSTRUCTOR = 1;
    const INSTRUCTOR_STUDENT = 2;
    const INSTRUCTOR_INSTRUCTOR = 3;
    const INSTRUCTOR_STAFF = 4;
    const STAFF_INSTRUCTOR = 5;
    const STAFF_STAFF = 6;
    
    const INVITED = 0;
    const CORRESPONDED = 1;
    const DECLINED = 2;
    const BLOCKED = 3;

    static public $types = array(
        0 => 'Student Student',
        1 => 'Student Instructor',
        2 => 'Instructor Student',
        3 => 'Instructor Instructor',
        4 => 'Instructor Staff',
        5 => 'Staff Instructor',
        6 => 'Staff Staff'
    );
    
    static public $statuses = array(
        0 => 'Invited',
        1 => 'Corresponded',
        2 => 'Declined',
        3 => 'Blocked'
    );

    /**
     * Returns an instance of this class.
     *
     * @return object CorrespondenceTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Correspondence');
    }

    public function getTypes()
    {
        return self::$types;
    }

    public function getStatuses()
    {
        return self::$statuses;
    }

    public static function getStatus($key)
    {
        return isset(self::$statuses[$key]) ? self::$statuses[$key] : "Undefined";
    }

    public function getType($innitiator_type = "Student", $correspondent_type = "Student")
    {
        if ($innitiator_type == "" || $correspondent_type == "")
        {
            return "";
        }
        $correspondence_types = self::$types;

        $flipped_correspondence_types = array_flip($correspondence_types);

        $type = $innitiator_type . " " . $correspondent_type;

        return $flipped_correspondence_types[$type];
    }

    public function findByInnitiatorAndCorrespondent($innitiator_id = null, $correspondent_id = null)
    {
        $query = $this->createQuery('c')
            ->where('c.innitiator_id = ?', $innitiator_id)
            ->addWhere('c.correspondent_id = ?', $correspondent_id);

        return $query->fetchOne();
    }

    public function findByCorrespondentAndInnitiator($correspondent_id = null, $innitiator_id = null)
    {
        $query = $this->createQuery('c')
            ->Where('c.correspondent_id = ?', $correspondent_id)
            ->addwhere('c.innitiator_id = ?', $innitiator_id);

        return $query->fetchOne();
    }

    public function retrieveByInnitiator(Doctrine_Query $q = null, $innitiator_id = null, $limit = 10)
    {
        if (is_null($q))
        {
            $q = $this->createQuery('c')
                ->where('c.innitiator_id = ?', $innitiator_id);
        }

        $q->addWhere('c.innitiator_id = ?', $innitiator_id);
        $q->limit($limit);

        return $q->execute();
    }

    public function retrieveByInnitiatorAndStatusAndUserTypes($innitiator_id = null, $innitiator_type = "", $correspondent_type = "Student", $status = null, $limit = 3)
    {
        $type = $this->getType($innitiator_type, $correspondent_type);
        $q = $this->createQuery('c')
            ->where('c.innitiator_id = ?', $innitiator_id);

        if (!is_null($status) && $status != "")
            $q->addWhere('c.status = ?', $status);

        if (!is_null($type) && $type != "")
            $q->addWhere('c.type = ?', $type);

        $q->limit($limit);
        return $q->execute();
    }

    public function retrieveStudentCorrespondencesByUserId($user_id = null, $status = 0, $limit = 100)
    {
        $q = $this->createQuery('c')
            ->where('((c.innitiator_id = ?) OR (c.correspondent_id = ? AND c.status != ?))', array($user_id, $user_id, $status))
            ->whereIn('c.type', array(self::STUDENT_STUDENT, self::STUDENT_INSTRUCTOR, self::INSTRUCTOR_STUDENT));

        $q->limit($limit);
        return $q->execute();
    }

    public function retrieveInstructorCorrespondencesByUserId($user_id = null, $status = 0, $limit = 100)
    {
        $q = $this->createQuery('c')
            ->where('((c.innitiator_id = ?) OR (c.correspondent_id = ? AND c.status != ?))', array($user_id, $user_id, $status))
            ->whereIn('c.type', array(self::INSTRUCTOR_INSTRUCTOR, self::STUDENT_INSTRUCTOR, self::INSTRUCTOR_STUDENT));

        $q->limit($limit);
        return $q->execute();
    }

    public function retrieveCorrespondencesByUserId($user_id = null, $limit = 100)
    {
        $q = $this->createQuery('c')
            ->where('c.innitiator_id = ?', $user_id)
            ->orWhere('c.correspondent_id = ?', $user_id);

        $q->limit($limit);
        return $q->execute();
    }
    
    public function retrieveRequestsByUserIdAndStatus($user_id = null, $status = 0, $limit = 100)
    {
        $q = $this->createQuery('c')
            ->where('c.correspondent_id = ?', $user_id)
            ->andWhere('c.status = ?', $status);

        $q->limit($limit);
        return $q->execute();
    }

    public function retrieveSuggestionsByStudentIdAndInnitiatorId(Doctrine_Query $q = null, $student_id = null, $innitiator_id = null, $limit = 3)
    {
        //echo $innitiator_id; die;
        $randomized_suggestions = array();
        $q = Doctrine_Query::create()
            ->select('u.id, u.first_name, u.last_name')
            ->from("sfGuardUser u")
            ->where('id IN (SELECT st.user_id FROM Student st WHERE st.id IN (SELECT sc.student_id FROM StudentCourse sc WHERE sc.course_id IN (SELECT sc2.course_id FROM Studentcourse sc2 WHERE sc2.student_id = ?)))', $student_id)
//            ->orWhere('id IN (SELECT i.user_id FROM Instructor i WHERE i.id IN (SELECT ic.instructor_id FROM InstructorCourse ic WHERE ic.course_id IN (SELECT sc3.course_id FROM Studentcourse sc3 WHERE sc3.student_id = ?)))', $student_id)
            ->addWhere('(u.id NOT IN (SELECT c1.correspondent_id FROM correspondence c1 WHERE c1.innitiator_id = ?))', $innitiator_id)
            ->addWhere('(u.id NOT IN (SELECT c2.innitiator_id FROM correspondence c2 WHERE c2.correspondent_id = ?))', $innitiator_id)
            ->whereNotIn("u.id", array($innitiator_id));

        $first_list = $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        
        //myToolkit::debug($first_list);


//        $q = Doctrine_Query::create()
//            ->select('u.id, u.first_name, u.last_name')
//            ->from("sfGuardUser u")
//            ->where('u.id IN (SELECT c1.correspondent_id FROM correspondence c1 WHERE c1.innitiator_id IN (SELECT c2.correspondent_id FROM correspondence c2 WHERE c2.innitiator_id = ?))', $innitiator_id)
//            ->addWhere('u.id NOT IN (SELECT c3.correspondent_id FROM correspondence c3 WHERE c3.innitiator_id = ?)', $innitiator_id)
//            ->whereNotIn("u.id", array($innitiator_id));

        $second_list = $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        $combined_list = array_unique(array_merge($first_list, $second_list), SORT_REGULAR);

        // check to see if we can randomized the combined list to pick $limit random items
        if (count($combined_list) >= $limit)
        {
            $random_indexes = array_rand($combined_list, $limit);

            foreach ($random_indexes as $index => $item)
            {
                $randomized_suggestions[] = $combined_list[$item];
            }

            return $randomized_suggestions;
        }
        else // else return the narrow list
        {
            return $combined_list;
        }
    }

}