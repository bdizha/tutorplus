<?php

/**
 * Discussion
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    tutorplus
 * @subpackage model
 * @author     Batanayi Matuku
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Discussion extends BaseDiscussion {

    public function getAccessType() {
        $accessLevels = "";

        if (isset(DiscussionTable::$access_levels[parent::_get("access_level")])) {
            $accessLevels = DiscussionTable::$access_levels[parent::_get("access_level")];
        }
        if (is_array($accessLevel = explode(" - ", $accessLevels))) {
            return $accessLevel[0];
        } else {
            return $accessLevels;
        }
    }

    /**
     * Save the group member
     */
    public function saveGroupOwner($profile_id = null, $username = "") {
        $discussionMemberPeer = new DiscussionPeer();
        $discussionMemberPeer->setNickname(strtolower($username));
        $discussionMemberPeer->setProfileId($profile_id);
        $discussionMemberPeer->setDiscussionId($this->getId());
        $discussionMemberPeer->setMembershipType(2);
        $discussionMemberPeer->setPostingPermissionType(1);
        $discussionMemberPeer->save();
    }

    public function retrieveMembers($isRemoved = 0) {
        return DiscussionPeerTable::getInstance()->retrieveMembers($this->getId(), $isRemoved);
    }

    public function getNbNewTopics() {
        $q = Doctrine_Query::create()
                ->from('DiscussionTopic d');
        return DiscussionTopicTable::getInstance()->getNbNewTopics($q);
    }

    public function getNbNewReplies() {
        $q = Doctrine_Query::create()
                ->from('DiscussionComment d');
        return DiscussionComment::getInstance()->getNbNewReplies($q);
    }

    public function getNbNewMembersJoined() {
        $q = Doctrine_Query::create()
                ->from('DiscussionPeer dm');
        return DiscussionPeerTable::getInstance()->getNbNewMembersJoined($q);
    }

    public function getMemberByProfileId($profileId) {
        return DiscussionPeerTable::getInstance()->getMembersByDiscussionIdAndProfileId($this->getId(), $profileId);
    }

    public function getCourse() {
        $courseDiscussion = CourseDiscussionTable::getInstance()->findOneByDiscussionId($this->getId());
        if (is_object($courseDiscussion)) {
            return $courseDiscussion->getCourse();
        }
        return null;
    }

    public function getHtmlizedDescription() {
        return myToolkit::htmlString($this->getDescription());
    }

    public function getToEmails() {
        $toEmails = "";
        foreach (sfGuardUserTable::getInstance()->findAll() as $user) {
            $toEmails .= $user->getName() . " <" . $user->getEmail() . ">,";
        }

        $toEmails = trim($toEmails, ",");
        return $toEmails;
    }

    public function hasJoined($profileId) {
        return is_object(DiscussionPeerTable::getInstance()->findOneByDiscussionIdAndProfileId($this->getId(), $profileId));
    }

    public function postInsert($event) {
        // save this activity
        $replacements = array(
            $this->getProfile()->getSlug(),
            $this->getProfile()->getName(),
            $this->getSlug(),
            $this->getName()
        );

        $activityTemplate = ActivityTemplateTable::getInstance()->findOneByType(ActivityTemplateTable::TYPE_POSTED_DISCUSSION);

        if ($activityTemplate) {
            $activityFeed = new ActivityFeed();
            $activityFeed->setActivityTemplate($activityTemplate);
            $activityFeed->setReplacements(json_encode($replacements));
            $activityFeed->setProfileId($this->somethingId());
            $activityFeed->setItemId($this->getId());
            $activityFeed->save();

            // link this activity with the current user
            $activityFeedUser = new UserActivityFeed();
            $activityFeedUser->setProfileId($this->somethingId());
            $activityFeedUser->setActivityFeedId($activityFeed->getId());
            $activityFeedUser->save();
        }
    }

}