<?php

/**
 * Discussion
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    tutorplus
 * @subpackage model
 * @author     Batanayi Matuku
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Discussion extends BaseDiscussion {

    public function getAccessType() {
        $accessLevels = "";

        if (isset(DiscussionTable::$access_levels[parent::_get("access_level")])) {
            $accessLevels = DiscussionTable::$access_levels[parent::_get("access_level")];
        }
        if (is_array($accessLevel = explode(" - ", $accessLevels))) {
            return $accessLevel[0];
        } else {
            return $accessLevels;
        }
    }

    /**
     * Save the group member
     */
    public function saveGroupOwner($user_id = null, $username = "") {
        $discussionMember = new DiscussionMember();
        $discussionMember->setNickname(strtolower($username));
        $discussionMember->setUserId($user_id);
        $discussionMember->setDiscussionId($this->getId());
        $discussionMember->setMembershipType(2);
        $discussionMember->setPostingPermissionType(1);
        $discussionMember->save();
    }

    public function retrieveMembers($isRemoved = 0) {
        return DiscussionMemberTable::getInstance()->retrieveMembers($this->getId(), $isRemoved);
    }

    public function getNbNewTopics() {
        $q = Doctrine_Query::create()
                ->from('DiscussionTopic d');
        return DiscussionTopicTable::getInstance()->getNbNewTopics($q);
    }

    public function getNbNewReplies() {
        $q = Doctrine_Query::create()
                ->from('DiscussionTopicReply d');
        return DiscussionTopicReply::getInstance()->getNbNewReplies($q);
    }

    public function getNbNewMembersJoined() {
        $q = Doctrine_Query::create()
                ->from('DiscussionMember dm');
        return DiscussionMemberTable::getInstance()->getNbNewMembersJoined($q);
    }

    public function getMemberByUserId($userId) {
        return DiscussionMemberTable::getInstance()->getMembersByDiscussionIdAndUserId($this->getId(), $userId);
    }

    public function getCourse() {
        $courseDiscussion = CourseDiscussionTable::getInstance()->findOneByDiscussionId($this->getId());
        if (is_object($courseDiscussion)) {
            return $courseDiscussion->getCourse();
        }
        return null;
    }
    
    public function getHtmlizedDescription(){
        return myToolkit::htmlString($this->getDescription());
    }

}