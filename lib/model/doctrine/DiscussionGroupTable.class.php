<?php

/**
 * DiscussionGroupTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class DiscussionGroupTable extends Doctrine_Table {

    const ACCESS_LEVEL_PUBLIC = 0;
    const ACCESS_LEVEL_RESTRICTED = 1;
    const MODULE_COURSE = "course";
    const MODULE_PROFILE = "profile";
    const MODULE_DISCUSSION_GROUP = "group";

    static public $access_levels = array(
        0 => 'Public - Anyone can join, but only members can post messages.',
        1 => 'Restricted - Any prospect can only be invited by an active member.'
    );

    /**
     * Returns an instance of this class.
     *
     * @return object DiscussionGroupTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('DiscussionGroup');
    }

    public function getAccessLevels() {
        return self::$access_levels;
    }

    public function findOrCreateOneByCourse($course, $profileId) {
        if (!is_object($courseDiscussionGroup = CourseDiscussionGroupTable::getInstance()->findOneByCourseId($course->getId()))) {
            // save a DiscussionGroup
            $discussionGroup = new DiscussionGroup();
            $discussionGroup->setName($course->getCode() . " - main discussion");
            $discussionGroup->setDescription("This is the main group for the \"" . $course->getName() . "\" course. Essentially, all the peers of this course are encouraged to participate and collaborate with each other in order for each one involved to fully benefit from the rest of their group.");
            $discussionGroup->setProfileId($profileId);
            $discussionGroup->setAccessLevel(DiscussionGroupTable::ACCESS_LEVEL_RESTRICTED);
            $discussionGroup->save();

            // save a course DiscussionGroup
            $courseDiscussionGroup = new CourseDiscussionGroup();
            $courseDiscussionGroup->setCourse($course);
            $courseDiscussionGroup->setDiscussionGroup($discussionGroup);
            $courseDiscussionGroup->save();

            // save all course profiles to this discussion group
            $this->setProfilePeersByCourse($course, $discussionGroup);
        }
        return $courseDiscussionGroup->getDiscussionGroup();
    }

    public function setProfilePeersByCourse($course, $discussionGroup) {
        foreach ($course->getCourseProfiles() as $courseProfile) {
            if (!is_object($DiscussionPeer = DiscussionPeerTable::getInstance()->findOneByDiscussionGroupIdAndProfileId($discussionGroup->getId(), $courseProfile->getProfileId()))) {
                $DiscussionPeer = new DiscussionPeer();
                $DiscussionPeer->setDiscussionGroupId($discussionGroup);
                $DiscussionPeer->setProfileId($courseProfile->getProfileId());
                $DiscussionPeer->setNickname($courseProfile->getProfile()->getFirstName());
                $DiscussionPeer->setStatus(DiscussionPeerTable::STATUS_JOINED);
                $DiscussionPeer->setSubscriptionType(DiscussionPeerTable::SUBSCRIPTION_TYPE_PROMPT_EMAIL);
                $DiscussionPeer->setMembershipType(DiscussionPeerTable::MEMBERSHIP_TYPE_ORDINARY);
                $DiscussionPeer->save();
            }
        }
    }

    public function findOneByDiscussionGroupIdAndProfileId($discussionGroupId, $profileId) {
        $q = $this->createQuery('d')
                ->addWhere('d.id = ?', $discussionGroupId)
                ->andWhere('d.profile_id = ?', $profileId);
        return $q->fetchOne();
    }

    public function findOneByProfileIdAndIsPrimary($profileId, $isPrimary) {
        $q = $this->createQuery('d')
                ->addWhere('d.is_primary = ?', $isPrimary)
                ->andWhere('d.profile_id = ?', $profileId);
        return $q->fetchOne();
    }

    public function findOrCreatePrimaryDiscussionGroupByProfile($profile) {
        $discussionGroup = DiscussionGroupTable::getInstance()->findOneByProfileIdAndIsPrimary($profile->getId(), true);
        if (!is_object($discussionGroup)) {
            $discussionGroup = new DiscussionGroup();
            $discussionGroup->setName($profile->getName() . "'s general group");
            $discussionGroup->setIsPrimary(true);
            $discussionGroup->setProfileId($profile->getId());
            $discussionGroup->setAccessLevel(DiscussionGroupTable::ACCESS_LEVEL_RESTRICTED);
            $discussionGroup->setDescription("This is " . $profile->getName() . "'s general group in which you can share anything with them.");
            $discussionGroup->save();

            $DiscussionPeer = new DiscussionPeer();
            $DiscussionPeer->setNickname(strtolower($profile->getFirstName()));
            $DiscussionPeer->setProfileId($profile->getId());
            $DiscussionPeer->setDiscussionGroupId($discussionGroup->getId());
            $DiscussionPeer->setMembershipType(DiscussionPeerTable::MEMBERSHIP_TYPE_OWNER);
            $DiscussionPeer->setStatus(DiscussionPeerTable::STATUS_CREATOR);
            $DiscussionPeer->save();
        }
        return $discussionGroup;
    }

    public function findPopularDiscussionGroupsByProfileId($profileId, $limit = 10) {
        $q = $this->createQuery('d')
                ->innerJoin('d.Peers dp')
                ->andWhere('dp.profile_id = ?', $profileId);
        $q->limit($limit);
        return $q->execute();
    }

}