<?php

/**
 * DiscussionTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class DiscussionTable extends Doctrine_Table {

    const ACCESS_LEVEL_PUBLIC = 0;
    const ACCESS_LEVEL_RESTRICTED = 1;
    const MODULE_COURSE = "course";
    const MODULE_PROFILE = "profile";
    const MODULE_DISCUSSION = "discussion";

    static public $access_levels = array(
        0 => 'Public - Anyone can join, but only members can post messages.',
        1 => 'Restricted - Any prospect can only be invited by an active member.'
    );

    /**
     * Returns an instance of this class.
     *
     * @return object DiscussionTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Discussion');
    }

    public function getAccessLevels() {
        return self::$access_levels;
    }

    public function findOrCreateOneByCourse($course, $profileId) {
        if (!is_object($courseDiscussion = CourseDiscussionTable::getInstance()->findOneByCourseId($course->getId()))) {
            // save a discussion
            $discussion = new Discussion();
            $discussion->setName($course->getCode() . " - main discussion");
            $discussion->setDescription("This a discussion goup for the " . $course->getCode() . " course. Essentially, all the instructors and profiles of this course are encouraged to participate and collaborate with other participants in order for each one involved to fully benefit from the rest of the participants.");
            $discussion->setProfileId($profileId);
            $discussion->setAccessLevel(DiscussionTable::ACCESS_LEVEL_RESTRICTED);
            $discussion->save();

            // save a course discussion
            $courseDiscussion = new CourseDiscussion();
            $courseDiscussion->setCourse($course);
            $courseDiscussion->setDiscussion($discussion);
            $courseDiscussion->save();

            // save all course profiles to this discussion
            $this->setProfilePeersByCourse($course, $discussion);
        }
        return $courseDiscussion->getDiscussion();
    }

    public function setProfilePeersByCourse($course, $discussion) {
        foreach ($course->getCourseProfiles() as $courseProfile) {
            if (!is_object($discussionPeer = DiscussionPeerTable::getInstance()->findOneByDiscussionIdAndProfileId($discussion->getId(), $courseProfile->getProfileId()))) {
                $discussionPeer = new DiscussionPeer();
                $discussionPeer->setDiscussionId($discussion);
                $discussionPeer->setProfileId($courseProfile->getProfileId());
                $discussionPeer->setNickname($courseProfile->getProfile()->getFirstName());
                $discussionPeer->setStatus(DiscussionPeerTable::POSTING_PERMISSION_TYPE_DEFAULT);
                $discussionPeer->setSubscriptionType(DiscussionPeerTable::SUBSCRIPTION_TYPE_PROMPT_EMAIL);
                $discussionPeer->setPostingPermissionType(DiscussionPeerTable::POSTING_PERMISSION_TYPE_DEFAULT);
                $discussionPeer->setMembershipType(DiscussionPeerTable::MEMBERSHIP_TYPE_ORDINARY);
                $discussionPeer->save();
            }
        }
    }

    public function findOneByDiscussionIdAndProfileId($discussionId, $profileId) {
        $q = $this->createQuery('d')
                ->addWhere('d.id = ?', $discussionId)
                ->andWhere('d.profile_id = ?', $profileId);
        return $q->fetchOne();
    }

    public function findOneByProfileIdAndIsPrimary($profileId, $isPrimary) {
        $q = $this->createQuery('d')
                ->addWhere('d.is_primary = ?', $isPrimary)
                ->andWhere('d.profile_id = ?', $profileId);
        return $q->fetchOne();
    }

    public function findOrCreatePrimaryDiscussionByProfile($profile) {
        $discussion = DiscussionTable::getInstance()->findOneByProfileIdAndIsPrimary($profile->getId(), true);
        if (!is_object($discussion)) {
            $discussion = new Discussion();
            $discussion->setName($profile->getName() . "'s general discussion");
            $discussion->setIsPrimary(true);
            $discussion->setProfileId($profile->getId());
            $discussion->setAccessLevel(DiscussionTable::ACCESS_LEVEL_RESTRICTED);
            $discussion->setDescription("This is " . $profile->getName() . "'s general discussion and if you have anything to share with them please post it in this discussion.");
            $discussion->save();

            $discussionPeer = new DiscussionPeer();
            $discussionPeer->setNickname(strtolower($profile->getFirstName()));
            $discussionPeer->setProfileId($profile->getId());
            $discussionPeer->setDiscussionId($discussion->getId());
            $discussionPeer->setMembershipType(DiscussionPeerTable::MEMBERSHIP_TYPE_OWNER);
            $discussionPeer->setStatus(DiscussionPeerTable::STATUS_CREATOR);
            $discussionPeer->save();
        }
        return $discussion;
    }

    public function findPopularDiscussionsByProfileId($profileId, $limit = 10) {
        $q = $this->createQuery('d')
                ->innerJoin('d.Peers dp')
                ->andWhere('dp.profile_id = ?', $profileId);
        $q->limit($limit);
        return $q->execute();
    }

}