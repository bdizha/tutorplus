<?php

/**
 * DiscussionTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class DiscussionTable extends Doctrine_Table {

    const ACCESS_LEVEL_PUBLIC = 0;
    const ACCESS_LEVEL_RESTRICTED = 1;
    const MODULE_COURSE = "course";
    const MODULE_PROFILE = "profile";
    const MODULE_DISCUSSION = "group";

    static public $access_levels = array(
        0 => 'Public - Anyone can join, but only members can post messages.',
        1 => 'Restricted - Any prospect can only be invited by an active member.'
    );

    /**
     * Returns an instance of this class.
     *
     * @return object DiscussionTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Discussion');
    }

    public function getAccessLevels()
    {
        return self::$access_levels;
    }

    public function findOrCreateOneByCourse($course, $profileId)
    {
        if (!is_object($courseDiscussion = CourseDiscussionTable::getInstance()->findOneByCourseId($course->getId()))) {
            // save a Discussion
            $discussion = new Discussion();
            $discussion->setName($course->getCode() . " - main discussion");
            $discussion->setDescription("This is the main group for the \"" . $course->getName() . "\" course. Essentially, all the peers of this course are encouraged to participate and collaborate with each other in order for each one involved to fully benefit from the rest of their group.");
            $discussion->setProfileId($profileId);
            $discussion->setAccessLevel(DiscussionTable::ACCESS_LEVEL_RESTRICTED);
            $discussion->save();

            // save a course Discussion
            $courseDiscussion = new CourseDiscussion();
            $courseDiscussion->setCourse($course);
            $courseDiscussion->setDiscussion($discussion);
            $courseDiscussion->save();

            // save all course profiles to this discussion group
            $this->setProfilePeersByCourse($course, $discussion);
        }
        return $courseDiscussion->getDiscussion();
    }

    public function setProfilePeersByCourse($course, $discussion)
    {
        foreach ($course->getCourseProfiles() as $courseProfile) {
            if (!is_object($DiscussionPeer = DiscussionPeerTable::getInstance()->findOneByDiscussionIdAndProfileId($discussion->getId(), $courseProfile->getProfileId()))) {
                $DiscussionPeer = new DiscussionPeer();
                $DiscussionPeer->setDiscussionId($discussion);
                $DiscussionPeer->setProfileId($courseProfile->getProfileId());
                $DiscussionPeer->setNickname($courseProfile->getProfile()->getFirstName());
                $DiscussionPeer->setStatus(DiscussionPeerTable::STATUS_JOINED);
                $DiscussionPeer->setSubscriptionType(DiscussionPeerTable::SUBSCRIPTION_TYPE_PROMPT_EMAIL);
                $DiscussionPeer->setMembershipType(DiscussionPeerTable::MEMBERSHIP_TYPE_ORDINARY);
                $DiscussionPeer->save();
            }
        }
    }

    public function findOneByDiscussionIdAndProfileId($discussionId, $profileId)
    {
        $q = $this->createQuery('d')
                ->addWhere('d.id = ?', $discussionId)
                ->andWhere('d.profile_id = ?', $profileId);
        return $q->fetchOne();
    }

    public function findOneByProfileIdAndIsPrimary($profileId, $isPrimary)
    {
        $q = $this->createQuery('d')
                ->addWhere('d.is_primary = ?', $isPrimary)
                ->andWhere('d.profile_id = ?', $profileId);
        return $q->fetchOne();
    }

    public function findOrCreatePrimaryDiscussionByProfile($profile)
    {
        $discussion = DiscussionTable::getInstance()->findOneByProfileIdAndIsPrimary($profile->getId(), true);
        if (!is_object($discussion)) {
            $discussion = new Discussion();
            $discussion->setName($profile->getName() . "'s general discussion");
            $discussion->setIsPrimary(true);
            $discussion->setProfileId($profile->getId());
            $discussion->setAccessLevel(DiscussionTable::ACCESS_LEVEL_RESTRICTED);
            $discussion->setDescription("This is " . $profile->getName() . "'s general discussion in which you can share anything with them.");
            $discussion->save();

            $DiscussionPeer = new DiscussionPeer();
            $DiscussionPeer->setNickname(strtolower($profile->getFirstName()));
            $DiscussionPeer->setProfileId($profile->getId());
            $DiscussionPeer->setDiscussionId($discussion->getId());
            $DiscussionPeer->setMembershipType(DiscussionPeerTable::MEMBERSHIP_TYPE_OWNER);
            $DiscussionPeer->setStatus(DiscussionPeerTable::STATUS_CREATOR);
            $DiscussionPeer->save();
        }
        return $discussion;
    }

    public function findPopularDiscussionsByProfileId($profileId, $limit = 10)
    {
        $q = $this->createQuery('d')
                ->innerJoin('d.Peers dp')
                ->andWhere('dp.profile_id = ?', $profileId);
        $q->limit($limit);
        return $q->execute();
    }

    public function findByProfileId($profileId)
    {
        $q = $this->createQuery('d')
                ->innerJoin('d.Peers dp')
                ->addWhere("dp.profile_id = ?", $profileId)
                ->addOrderBy("d.updated_at Desc");
        return $q->execute();
    }

    public function findByCourseId($courseId)
    {
        $q = $this->createQuery('d')
                ->innerJoin('d.CourseDiscussion cd')
                ->andWhere('cd.course_id = ?', $courseId);
        return $q->execute();
    }

}