<?php

/**
 * FolderTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class FolderTable extends Doctrine_Table
{
    const ROOT_FOLDER = "File System";
    const PERSONAL_FOLDER = "Personal";
    const COURSES_FOLDER = "Courses";
    const COURSES_SECTION = "courses";
    const DOCUMENTS_SECTION = "documents";
    const ASSIGNMENTS_SECTION = "assignments";

    /**
     * Returns an instance of this class.
     *
     * @return object FolderTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Folder');
    }

    function fetchByUser($user)
    {
        return $this->getInstance()->discriminatelyFetchFolders($user->getName(), 1);
    }

    function fetchByCourse($course)
    {
        return $this->getInstance()->discriminatelyFetchFolders($course->getCode(), 2);
    }

    function fetchByAssignment($object)
    {
        return $this->getInstance()->discriminatelyFetchFolders($object->getTitle(), 3);
    }

    function discriminatelyFetchFolders($name, $level)
    {
        $folders = FolderTable::getInstance()
            ->createQuery('f')
            ->orderBy('f.lft ASC')
            ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        $userFolders = array();
        $canProceed = false;
        foreach ($folders as $key => $folder)
        {
            if ($name != $folder['name'] && $folder['level'] == $level && $canProceed)
            {
                break;
            }
            elseif ($name == $folder['name'] && $folder['level'] == $level)
            {
                $canProceed = true;
            }

            if ($canProceed)
            {
                $files = FileTable::getInstance()->fetchByFolderId($folder['id']);
                $folder['files'] = $files;
                $folder['nb_items'] = count($files) + $this->countSubFolders($folder['id'], $folders);
                $userFolders[] = $folder;
            }
        }

        return $userFolders;
    }

    function countSubFolders($parentFolderId, $folders)
    {
        $nbItems = 0;
        foreach ($folders as $folder)
        {
            if ($folder['parent_id'] == $parentFolderId)
            {
                $nbItems++;
            }
        }

        return $nbItems;
    }

    function getPossibleParentFoldersByObject($object, $folderSection)
    {
        $possibleParentFolders = array();

        if ($folderSection == FolderTable::DOCUMENTS_SECTION)
        {
            $folders = self::getInstance()->fetchByUser($object);
        }
        elseif ($folderSection == FolderTable::COURSES_SECTION)
        {
            $folders = self::getInstance()->fetchByCourse($object);
        }
        elseif ($folderSection == FolderTable::ASSIGNMENTS_SECTION)
        {
            $folders = self::getInstance()->fetchByAssignment($object);
        }

        foreach ($folders as $folder)
        {
            $possibleParentFolders[$folder['id']] = str_repeat("- ", $folder['level'] - 2) . $folder['name'];
        }

        return $possibleParentFolders;
    }

    function getAncestryPathFolderId($folderPath, $folderId)
    {
        $folder = FolderTable::getInstance()->find($folderId);
        $folderPath[] = $folderId;

        if ($folder->getLevel() > 0)
        {
            return $this->getAncestryPathFolderId($folderPath, $folder->getParentId());
        }
        else
        {
            return $folderPath;
        }
    }

    public function findOrCreateOneByNameAndParent($name = FolderTable::ROOT_FOLDER, $parentFolder = null)
    {
        if (!is_object($folder = $this->getInstance()->findOneByNameAndParentId($name, $parentFolder)))
        {
            $folder = new Folder();
            $folder->setName($name);
            if (!$parentFolder)
            {
                // we're new and we have no parent, so save as root
                $folder->getTable()->getTree()->createRoot($folder);
            }
            else
            {
                $folder->setParentId($parentFolder->getId());
                $folder->getNode()->insertAsLastChildOf($parentFolder);
            }
        }
        return $folder;
    }

    public function findOneByNameAndParentId($name, $parentFolder)
    {
        $query = $this->createQuery('f')
            ->addWhere('f.name = ?', $name);
        if ($parentFolder)
        {
            $query->andWhere('f.parent_id = ?', $parentFolder->getId());
        }

        return $query->fetchOne();
    }

    public function fetchByParentId($parentFolderId)
    {
        $query = $this->createQuery('f')
            ->addWhere('f.parent_id = ?', $parentFolderId);

        return $query->execute();
    }

}