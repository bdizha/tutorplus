<?php

/**
 * PeerTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PeerTable extends Doctrine_Table {

    const TYPE_STUDENT_STUDENT = 0;
    const TYPE_STUDENT_INSTRUCTOR = 1;
    const TYPE_INSTRUCTOR_STUDENT = 2;
    const TYPE_INSTRUCTOR_INSTRUCTOR = 3;
    const TYPE_INSTRUCTOR_STAFF = 4;
    const TYPE_STAFF_INSTRUCTOR = 5;
    const TYPE_STAFF_STAFF = 6;
    const STATUS_OPEN = 0;
    const STATUS_SUGGESTED = 1;
    const STATUS_INVITED = 2;
    const STATUS_PEERED = 3;
    const STATUS_DECLINED = 4;

    static public $types = array(
        0 => 'Student Student',
        1 => 'Student Instructor',
        2 => 'Instructor Student',
        3 => 'Instructor Instructor',
        4 => 'Instructor Staff',
        5 => 'Staff Instructor',
        6 => 'Staff Staff'
    );
    static public $statuses = array(
        0 => 'Open',
        1 => 'Suggested',
        2 => 'Invited',
        3 => 'Peered',
        4 => 'Declined'
    );

    /**
     * Returns an instance of this class.
     *
     * @return object PeerTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Peer');
    }

    public function getTypes() {
        return self::$types;
    }

    public function getStatuses() {
        return self::$statuses;
    }

    public static function getStatus($key) {
        return isset(self::$statuses[$key]) ? self::$statuses[$key] : "Undefined";
    }

    public function getType($inviterType = "Student", $inviteeType = "Student") {
        if ($inviterType == "" || $inviteeType == "") {
            return null;
        } else {
            $requestedType = $inviterType . " " . $inviteeType;
        }
        $peerTypes = self::$types;
        $flippedPeerTypes = array_flip($peerTypes);

        return isset($flippedPeerTypes[$requestedType]) ? $flippedPeerTypes[$requestedType] : null;
    }

    public function findByProfileIdAndIsInstructor($profileId, $isInstructor) {
        $q = $this->createQuery('p')
                ->where('((p.inviter_id = ?) OR (p.invitee_id = ?))', array($profileId, $profileId))
                ->addWhere('((p.Invitee.is_instructor = ?) OR (p.Inviter.is_instructor = ?))', array($isInstructor, $isInstructor));
        return $q->execute();
    }

    public function findByInviteeIdAndStatus($inviteeId, $status) {
        $q = $this->createQuery('p')
                ->where('p.inviter_id = ?', $inviteeId)
                ->addWhere('p.status = ?', $status);
        return $q->execute();
    }

    public function findByNotProfileId($profileId) {
        $q = Doctrine_Query::create()
                ->from("Profile p")
                ->addWhere('(p.id NOT IN (SELECT p1.inviter_id FROM peer p1 WHERE p1.invitee_id = ?))', $profileId)
                ->addWhere('(p.id NOT IN (SELECT p2.invitee_id FROM peer p2 WHERE p2.inviter_id = ?))', $profileId)
                ->whereNotIn("p.id", array($profileId));

        return $q->execute();
    }

    public function findOneByPeers($inviterId, $inviteeId) {
        $q = $this->createQuery('p')
                ->where('(p.inviter_id = ? AND p.invitee_id = ?)', array($inviterId, $inviteeId))
                ->orWhere('(p.inviter_id = ? AND p.invitee_id = ?)', array($inviteeId, $inviterId));
        return $q->fetchOne();
    }

    public function findByProfileId($profileId, $limit = 22) {
        $q = Doctrine_Query::create()
                ->from("Profile p")
                ->addWhere('(p.id IN (SELECT p1.inviter_id FROM peer p1 WHERE p1.invitee_id = ?))', $profileId)
                ->orWhere('(p.id IN (SELECT p2.invitee_id FROM peer p2 WHERE p2.inviter_id = ?))', $profileId)
                ->whereNotIn("p.id", array($profileId))
                ->limit($limit);

        return $q->execute();
    }

}