<?php

/**
 * PeerTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PeerTable extends Doctrine_Table {

    const STATUS_OPEN = 0;
    const STATUS_SUGGESTED = 1;
    const STATUS_REQUESTED = 2;
    const STATUS_PEERED = 3;
    const STATUS_DECLINED = 4;

    static public $statuses = array(
        0 => 'Open',
        1 => 'Suggested',
        2 => 'Invited',
        3 => 'Peered',
        4 => 'Declined'
    );
    static public $labels = array(
        0 => 'Open',
        1 => 'Suggested',
        2 => 'Invited',
        3 => 'Peers',
        4 => 'Declined'
    );

    /**
     * Returns an instance of this class.
     *
     * @return object PeerTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Peer');
    }

    public function getStatuses() {
        return self::$statuses;
    }

    public static function getStatus($key) {
        return isset(self::$statuses[$key]) ? self::$statuses[$key] : "Undefined";
    }

    public function findOrCreateSelfPeerByProfileId($profileId) {
        $peer = self::getInstance()->findOneByPeers($profileId, $profileId);
        if (!is_object($peer)) {
            $peer = new Peer();
            $peer->setInviteeId($profileId);
            $peer->setInviterId($profileId);
            $peer->setStatus(self::STATUS_PEERED);
            $peer->save();
        }
        return $peer;
    }

    public function findByProfileIdAndIsInstructor($profileId, $isInstructor) {
        $q = $this->createQuery('p')
            ->where('(p.inviter_id <> ? AND p.invitee_id = ? AND p.Inviter.is_instructor = ?) OR (p.invitee_id <> ? AND p.inviter_id = ? AND p.Invitee.is_instructor = ?)', array($profileId, $profileId, $isInstructor, $profileId, $profileId, $isInstructor))
            ->andwhere('(p.status = ? OR p.status = ?)', array(self::STATUS_PEERED, self::STATUS_REQUESTED));
        return $q->execute();
    }

    public function findByProfileId($profileId) {
        $q = $this->createQuery('p')
            ->where('(p.inviter_id <> ? AND p.invitee_id = ?) OR (p.invitee_id <> ? AND p.inviter_id = ?)', array($profileId, $profileId, $profileId, $profileId))
            ->andwhere('(p.status = ? OR p.status = ?)', array(self::STATUS_PEERED, self::STATUS_REQUESTED));
        return $q->execute();
    }
    
    public function findByInviteeIdAndStatus($inviteeId, $status, $limit = null) {
        $q = $this->createQuery('p')
            ->where('p.invitee_id = ?',$inviteeId)
            ->addWhere('p.status = ?', $status);
        if ($limit) {
            $q->limit($limit);
        }
        return $q->execute();
    }

    public function findByProfileIdAndStatus($profileId, $status, $limit = null) {
        $q = $this->createQuery('p')
            ->where('p.invitee_id = ? OR p.inviter_id = ?', array($profileId, $profileId))
            ->addWhere('p.status = ?', $status);
        if ($limit) {
            $q->limit($limit);
        }
        return $q->execute();
    }

    public function findByNotProfileId($profileId) {
        $q = Doctrine_Query::create()
            ->from("Profile p")
            ->addWhere('(p.id NOT IN (SELECT p1.inviter_id FROM peer p1 WHERE p1.invitee_id = ?))', $profileId)
            ->andWhere('(p.id NOT IN (SELECT p2.invitee_id FROM peer p2 WHERE p2.inviter_id = ?))', $profileId)
            ->whereNotIn("p.id", array($profileId));

        return $q->execute();
    }

    public function findOneByPeers($inviterId, $inviteeId) {
        $q = $this->createQuery('p')
            ->where('(p.inviter_id = ? AND p.invitee_id = ?)', array($inviterId, $inviteeId))
            ->orWhere('(p.inviter_id = ? AND p.invitee_id = ?)', array($inviteeId, $inviterId));

        $peer = $q->fetchOne();

        if (!is_object($peer)) {
            $peer = new Peer();
            $peer->setInviteeId($inviteeId);
            $peer->setInviterId($inviterId);
            $peer->setStatus($inviteeId == $inviterId ? self::STATUS_PEERED : self::STATUS_SUGGESTED);
            $peer->save();
        }
        return $peer;
    }

    public function findSuggestedByProfileId($profileId, $limit = null) {
        $q = $this->createQuery('p')
            ->where('p.invitee_id = ? OR p.inviter_id = ?', array($profileId, $profileId))
            ->addWhere('p.status = ?', self::STATUS_SUGGESTED);
        if ($limit) {
            $q->limit($limit);
        }
        return $q->execute();
    }

}