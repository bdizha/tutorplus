<?php

/**
 * ProfileTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProfileTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object ProfileTable
	 */
	public static function getInstance() {
		return Doctrine_Core::getTable('Profile');
	}

	public function findByFields($likeExpression, $notIds = array(), $limit = 100) {
		if ($likeExpression == "%") {
			return $users = $this->createQuery('p')
			->whereNotIn("p.id", $notIds)
			->orderby("p.first_name, p.last_name ASC")
			->limit($limit)
			->execute();
		} else {
			return $this->createQuery('p')
			->where("(p.first_name LIKE '%{$likeExpression}%' OR p.last_name LIKE '%{$likeExpression}%' OR p.email LIKE '%{$likeExpression}%')")
			->whereNotIn("p.id", $notIds)
			->orderby("p.first_name, p.last_name ASC")
			->limit($limit)
			->execute();
		}
	}

	public function findBySearch($likeExpression, $previousEmails = array(), $limit = 100) {
		return $this->createQuery('p')
		->where("(p.first_name LIKE '%{$likeExpression}%' OR p.last_name LIKE '%{$likeExpression}%' OR p.email LIKE '%{$likeExpression}%')")
		->whereNotIn("p.email", $previousEmails)
		->orderby("p.first_name, p.last_name ASC")
		->limit($limit)
		->execute();
	}

	public function retrieveProfileIdsByDiscussionGroupId($discussionGroupId = null, $isRemoved = 0) {
		$query = $this->createQuery('p')
		->select('p.id')
		->innerJoin('p.DiscussionPeer dp')
		->where('dp.discussion_group_id = ?', $discussionGroupId);

		return $query->execute()->getPrimaryKeys();
	}

	public function retrieveByEmails($emails = array()) {
		//$emails = explode(";", $emails);
		if (count($emails) == 0) {
			return array();
		}
		$query = $this->createQuery('p')
		->whereIn('p.email', $emails);

		return $query->execute();
	}

	/**
	 * Retrieves a Profile object by email and is_active flag.
	 *
	 * @param  string  $email    The email
	 * @param  boolean $isActive The user's status
	 *
	 * @return Profile
	 */
	public function retrieveByEmail($email, $isActive = true) {
		$query = Doctrine_Core::getTable('Profile')->createQuery('p')
		->where('p.email = ?', $email)
		->addWhere('p.is_active = ?', $isActive);

		return $query->fetchOne();
	}

	public function retrieveByCourseId($courseId) {
		$query = $this->createQuery('p')
		->select('p.id')
		->innerJoin('p.ProfileCourses pc')
		->where('pc.course_id = ?', $courseId);

		return $query->execute();
	}

	public function findByCourseId($courseId, $isInstructor) {
		$q = $this->createQuery('p')
		->innerJoin('p.ProfileCourses pc')
		->where('pc.course_id = ?', $courseId)
		->andWhere('p.is_instructor = ?', $isInstructor);
		return $q->execute();
	}

	public function findByIds($ids){
		$query = $this->createQuery('p')
		->whereIn('p.id', $ids);

		return $query->execute();
	}

	public function getInstructorQuery($query) {
		return $query->addWhere("a.is_instructor = ?", true);
	}

	public function getStudentQuery($query) {
		return $query->addWhere("a.is_instructor = ?", false);
	}

	public function findSuggestionsByProfileId($profileId, $limit = 50) {
		$q = Doctrine_Query::create()
		->from("Profile p");

		$wherePart = '(p.id NOT IN (SELECT p1.inviter_id FROM peer p1 WHERE p1.invitee_id = ?) AND ';
		$wherePart .= 'p.id NOT IN (SELECT p2.invitee_id FROM peer p2 WHERE p2.inviter_id = ?) AND p.id != ?)';
		$andWherePart = '(p.id IN (SELECT p11.inviter_id FROM peer p11 WHERE p11.status != 1 AND p11.invitee_id IN (SELECT p111.inviter_id FROM peer p111 WHERE p111.invitee_id = ? AND p111.status != 1)) OR ';
		$andWherePart .= 'p.id IN (SELECT p22.inviter_id FROM peer p22 WHERE p22.status != 1 AND p22.invitee_id IN (SELECT p222.invitee_id FROM peer p222 WHERE p222.inviter_id = ? AND p222.status != 1)) OR ';
		$andWherePart .= 'p.id IN (SELECT p33.invitee_id FROM peer p33 WHERE p33.status != 1 AND p33.inviter_id IN (SELECT p333.inviter_id FROM peer p333 WHERE p333.invitee_id = ? AND p333.status != 1)) OR ';
		$andWherePart .= 'p.id IN (SELECT p44.invitee_id FROM peer p44 WHERE p44.status != 1 AND p44.inviter_id IN (SELECT p444.invitee_id FROM peer p444 WHERE p444.inviter_id = ? AND p444.status != 1)))';

		$q->where($wherePart, array($profileId, $profileId, $profileId));
		$q->andWhere($andWherePart, array($profileId, $profileId, $profileId, $profileId))
		->limit($limit);

		return $q->execute();
	}

}