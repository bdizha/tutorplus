<?php

/**
 * sfGuardUserTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class sfGuardUserTable extends PluginsfGuardUserTable
{
    const TYPE_STUDENT = "Student";
    const TYPE_INSTRUCTOR = "Instructor";
    const TYPE_STAFF = "Staff";

    /**
     * Returns an instance of this class.
     *
     * @return object sfGuardUserTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('sfGuardUser');
    }

    public function findByFields($exp, $excludedIds = array(), $limit = 100)
    {
        if ($exp == "%")
        {
            return $users = $this->createQuery('u')
                ->whereNotIn("u.id", $excludedIds)
                ->orderby("u.first_name, u.last_name ASC")
                ->limit($limit)
                ->execute();
        }
        else
        {
            return $this->createQuery('u')
                    ->where("(u.first_name LIKE '%{$exp}%' OR u.last_name LIKE '%{$exp}%' OR u.email_address LIKE '%{$exp}%')")
                    ->whereNotIn("u.id", $excludedIds)
                    ->orderby("u.first_name, u.last_name ASC")
                    ->limit($limit)
                    ->execute();
        }
    }

    public function findBySearch($exp, $previousEmailAddresses = array(), $limit = 100)
    {
        return $this->createQuery('u')
                ->where("(u.first_name LIKE '%{$exp}%' OR u.last_name LIKE '%{$exp}%' OR u.email_address LIKE '%{$exp}%')")
                ->whereNotIn("u.email_address", $previousEmailAddresses)
                ->orderby("u.first_name, u.last_name ASC")
                ->limit($limit)
                ->execute();
    }

    public function retrieveByIds($ids = array())
    {
        if (count($ids) == 0)
        {
            return array();
        }
        $query = $this->createQuery('u')
            ->whereIn('u.id', $ids);

        return $query->execute();
    }

    public function retrieveUserIdsByDiscussionId($discussionId = null)
    {
        $query = $this->createQuery('u')
            ->select('u.id')
            ->innerJoin('u.DiscussionMember dm')
            ->where('dm.discussion_id = ?', $discussionId);

        return $query->execute()->getPrimaryKeys();
    }

}